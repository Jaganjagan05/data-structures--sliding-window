Given a string S consisting of the characters 0, 1 and 2. Your task is to find the length of the smallest substring of string S that contains all the three characters 0, 1 and 2. If no such substring exists, then return -1.

Example 1:

Input:
S = 10212
Output:
3
Explanation:
The substring 102 is the smallest substring
that contains the characters 0, 1 and 2.
Example 2:

Input: 
S = 12121
Output:
-1
Explanation: 
As the character 0 is not present in the
string S, therefor no substring containing
all the three characters 0, 1 and 2
exists. Hence, the answer is -1 in this case.
Your Task:
Complete the function smallestSubstring() which takes the string S as input, and returns the length of the smallest substring of string S that contains all the three characters 0, 1 and 2.

Expected Time Complexity: O( length( S ) )
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ length( S ) ≤ 105
All the characters of String S lies in the set {'0', '1', '2'}
class Solution {
    public int smallestSubstring(String S) {
        // Code h
        int n = S.length();
        Set<Character> uni = new HashSet<>(Arrays.asList('0', '1', '2'));


        
        // Add all unique characters to the set
        for (int i = 0; i < n; i++) {
            uni.add(S.charAt(i));
        }

        Map<Character, Integer> map = new HashMap<>();
        int ans = Integer.MAX_VALUE;  // Initialize with max value
        int i = 0, j = 0;

        while (j < n) {
            map.put(S.charAt(j), map.getOrDefault(S.charAt(j), 0) + 1);

            while (map.size() == uni.size()) {  // Check if all unique chars are included
                ans = Math.min(ans, j - i + 1);
                map.put(S.charAt(i), map.get(S.charAt(i)) - 1);

                if (map.get(S.charAt(i)) == 0) {
                    map.remove(S.charAt(i));
                }
                i++; // Move left pointer to shrink the window
            }
            j++;
        }

        return (ans == Integer.MAX_VALUE) ? -1  : ans;  // Return 0 if no valid substring is found

    }
};
