Given an array of integers arr[]  and a number k. Return the maximum sum of a subarray of size k.

Note: A subarray is a contiguous part of any given array.

Examples:

Input: arr[] = [100, 200, 300, 400] , k = 2
Output: 700
Explanation: arr3  + arr4 = 700, which is maximum.
Input: arr[] = [100, 200, 300, 400] , k = 4
Output: 1000
Explanation: arr1 + arr2 + arr3 + arr4 = 1000, which is maximum.
Input: arr[] = [100, 200, 300, 400] , k = 1
Output: 400
Explanation: arr4 = 400, which is maximum.
Constraints:
1 <= arr.size() <= 106
1 <= arr[i]<= 106
1 <= k<= arr.size()
class Solution {
    public int maximumSumSubarray(int[] arr, int k) {
        int n = arr.length;
        if (n < k) return -1; // Edge case: If array size is smaller than k

        int sum = 0;
        // Compute the sum of the first k elements
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }

        int ans = sum; // Initialize answer with the first k elements sum

        // Use sliding window to calculate max sum of k-sized subarray
        for (int i = k; i < n; i++) {
            sum += arr[i] - arr[i - k]; // Slide the window
            ans = Math.max(ans, sum);
        }

        return ans;
    }
}
